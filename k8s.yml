apiVersion: apps/v1
kind: Deployment
metadata:
  name: token-provider
spec:
  selector:
    matchLabels:
      app: token-provider
  replicas: 1
  template:
    metadata:
      labels:
        app: token-provider
    spec:
      containers:
        - name: token-provider
          image: jfrhudson/token-provider:2.0
          imagePullPolicy: IfNotPresent
          env:
            - name: MANAGEMENT_ENDPOINT_METRICS_ENABLED
              value: "true"
            - name: MANAGEMENT_ENDPOINT_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED
              value: "true"
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: token-provider
  name: token-provider
  namespace: jefferson023
spec:
  ports:
    - port: 8081
      protocol: TCP
      targetPort: 8080
  selector:
    app: token-provider
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-music
spec:
  selector:
    matchLabels:
      app: my-music
  replicas: 1
  template:
    metadata:
      labels:
        app: my-music
    spec:
      containers:
        - name: my-music
          image: jfrhudson/my-music:1.0
          imagePullPolicy: Always
          env:
            - name: TOKEN_PROVIDER_URL
              value: "http://token-provider:8081/"
            - name: MANAGEMENT_ENDPOINT_METRICS_ENABLED
              value: "true"
            - name: MANAGEMENT_ENDPOINT_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED
              value: "true"
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: my-music
  name: my-music
  namespace: jefferson023
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
      app: my-music
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    scrape_configs:
      - job_name: prometheus-monitoring
        metrics_path: /actuator/prometheus 
        scheme: http
        static_configs:
        - targets: ['token-provider:8081', 'my-music:8080']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf
  
        - name: prometheus-storage-volume
          emptyDir: {}
--- 
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: jefferson023
  labels:
    app: prometheus
  annotations:
    dev.okteto.com/auto-ingress: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP  
  ports:
  - name: prometheus
    port: 9090
  selector:
    app: prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: jefferson023
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - name: grafana
              containerPort: 3000
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
      volumes:
        - name: grafana-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: jefferson023
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port:   '3000'
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000